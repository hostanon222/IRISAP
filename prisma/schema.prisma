// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Artwork {
  id          String   @id @default(cuid())
  imageUrl    String   @db.Text  // Will store IPFS hash later
  imageData   String?  @db.LongText // Temporary storage for base64
  description String   @db.Text
  reflection  String?  @db.Text
  votes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pixelCount  Int      @default(0)
  ipfsHash    String?  // For future IPFS integration
  
  // Additional metadata
  phase       String   @default("completed")
  complexity  Float    @default(0)
  
  // Relationships
  userVotes   UserVote[]

  @@index([createdAt])
  @@index([votes])
}

model UserVote {
  id        String   @id @default(cuid())
  userId    String   // Store the user ID
  artworkId String   // Reference to the artwork
  artwork   Artwork  @relation(fields: [artworkId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, artworkId]) // Prevent duplicate votes
  @@index([artworkId])
}

model Stats {
  id             String   @id @default("global")
  totalCreations Int      @default(0)
  totalPixels    Int      @default(0)
  totalVotes     Int      @default(0)
  lastUpdateAt   DateTime @updatedAt
}
